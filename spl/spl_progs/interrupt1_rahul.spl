//print "In int 1";

alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

alias sysCallNo S1;
sysCallNo = [physicalSP - 1];

alias arg1 S2;
alias arg2 S3;

arg1 = [physicalSP - 3];	//From the third position as the return value occupies the second

if (sysCallNo == 1) then
	//If file exists, return 0, i.e., success 
	S4 = FAT;
	while (S4 <= (FAT + 512)) do
		if (arg1 == [S4]) then
			[physicalSP - 2] = 0;
			ireturn;
		endif;
		S4 = S4 + 8;
	endwhile;

//	print "While1 Exited";

	//Search disk free list for free space
	S4 = DISK_LIST;
	while (S4 <= (DISK_LIST + 447)) do
		if ([S4] == 0) then
			break;
		endif;
		if ((S4 == (DISK_LIST + 447)) && ([S4] != 0)) then
			[physicalSP - 2] = -1;
			ireturn;
		endif;
		S4 = S4 + 1;
	endwhile;

//	print "While2 Exited";

	S4 = S4 - DISK_LIST;
	alias BasicBlock S4;

	//Check FAT for free space
	S5 = FAT + 2;
	while (S5<= (FAT + 512)) do
		if ([S5] == -1) then
			break;
		endif;
		if ((S5 == (FAT + 512)) && ([S5] != -1)) then
			[physicalSP - 2] = -1;
			ireturn;
		endif;
		S5 = S5 + 8;
	endwhile;

//	print "While3 Exited";

	//Set FAT entry
	[S5] = BasicBlock;
	[S5 - 1] = 0;
	[S5 - 2] = arg1;

	load (1, BasicBlock);	//Load the basic block to Scratchpad for editing
	
	//Set all entries of the basic block as -1
	S6 = 0;
	while ((SCRATCHPAD + S6) < 1024) do
		[SCRATCHPAD + S6] = -1;
		S6 = S6 + 1;
	endwhile;

//	print "While4 Exited";

	//Store back to Disk
	store(1, BasicBlock);

	[DISK_LIST + BasicBlock] = 1;
	store(5, 19);
	store(6, 20);

	[physicalSP - 2] = 0;
	ireturn;

endif;	//Implementation of Create system call

if (sysCallNo == 4) then
	S4 = FAT;
	while (S4 <= (FAT + 512)) do
		if (arg1 == [S4]) then
			break;
		endif;
		S4 = S4 + 8;
	endwhile;

	//If not found
	if (S4 >= (FAT + 520)) then
		[physicalSP - 2] = -1;
		ireturn;
	endif;

	//Search the System wide Open file table for the file
	S5 = 0;
	while (S5 < 128) do
		if ([1344 + S5 + 0] == S4/8) then
			[physicalSP - 2] = -1;
			ireturn;
		endif;
		S5 = S5 + 2;
	endwhile;

	alias basicBlock S6;
	basicBlock = S4 + 2;

	S7 = 0;
	while (S7 < 256) do
		load (1, basicBlock);
		if ([SCRATCHPAD + S7] == -1) then
			break;
		endif;
		S9 = [SCRATCHPAD + S7];
		load (1, S9);
		S8 = 0;
		while (S8 < 512) do
			[SCRATCHPAD + S8] = "";
			S8 = S8 + 1;
		endwhile;
		store (1, S9);
		[DISK_LIST + S9] = 0;
		S7 = S7 + 1;
	endwhile;

	load (1, basicBlock);
	S7 = 0;
	while (S7 < 512) do
		[SCRATCHPAD + S7] = "";
		S7 = S7 + 1;
	endwhile;
	store(1, basicBlock);
	[DISK_LIST + basicBlock] = 0;

	[S4 + 0] = -1;
	[S4 + 2] = -1;

	//Store back FAT and Disk Free list
	store(5, 19);
	store(6, 20);

	[physicalSP - 2] = 0;
	ireturn;

endif;