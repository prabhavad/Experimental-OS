// PCB
//===========================================================================
//| 0	| 1	    | 2		|3	 |4	   |5	  |6	  |7-14	  |15-30    | 31	|
//| PID | State | BP	|SP	 |IP   |PTBR  |PTLR	  |R0-R7  |PPOFT	| Free	|
//===========================================================================


// Find PID of currently running process

alias currentPID S0;
currentPID = (PTBR - 1024) / 8;


// Find location of PCB of current Process

alias currentPCB S1;
currentPCB = READY_LIST + 32 * currentPID;

//Set State of currProcess to Ready
[currentPCB + 1] = 1;

[currentPCB + 2] = BP;
[currentPCB + 3] = SP - 1;

//get the ip

alias physicalSP S2;
physicalSP = ([ PTBR + 2*(SP/512) ] * 512) + (SP % 512);

[currentPCB + 4] = [physicalSP];

// Set Page Table bp & lr

[currentPCB + 5] = PTBR;
[currentPCB + 6] = PTLR;

//Save Value of Registers

[currentPCB + 7] = R0;
[currentPCB + 8] = R1;
[currentPCB + 9] = R2;
[currentPCB + 10] = R3;
[currentPCB + 11] = R4;
[currentPCB + 12] = R5;
[currentPCB + 13] = R6;
[currentPCB + 14] = R7;



//Find new PID of the new process

S3 = (currentPID + 1) % 32;
alias newPCB S4;

while (1) do
	if ([READY_LIST + S3*32 + 1]==1) then	//STATE of a Process is 1,Ready
		break;
	else
		S3 = (S3 + 1) % 32;
	endif;
	
endwhile;

newPCB = READY_LIST + S3*32;

//Load Register Values from PCB

BP = [newPCB + 2];
SP = [newPCB + 3];

// Set Page Table bp & lr

PTBR = [newPCB + 5];
PTLR = [newPCB + 6];



//Save Value of Registers

R0 = [newPCB + 7];
R1 = [newPCB + 8];
R2 = [newPCB + 9];
R3 = [newPCB + 10];
R4 = [newPCB + 11];
R5 = [newPCB + 12];
R6 = [newPCB + 13];
R7 = [newPCB + 14];

//Store IP in Top of Stack

SP = SP + 1;

alias newphysicalSP S2;

newphysicalSP = ( [PTBR + 2*(SP/512)] * 512) + (SP % 512);

[ newphysicalSP ] = [ newPCB + 4 ];

//Set process state to RUNNING

[newPCB + 1] = 2;

ireturn; 
