// PCB
//===========================================================================
//| 0	| 1	    | 2		|3	 |4	   |5	  |6	  |7-14	  |15-30    | 31	|
//| PID | State | BP	|SP	 |IP   |PTBR  |PTLR	  |R0-R7  |PPOFT	| Free	|
//===========================================================================

S15 = (PTBR-1024)/8;


alias physicalSP S0;

physicalSP = ([PTBR + 2*(SP/512)]*512 + (SP)%512);

alias countter S1;
countter = 0;

// Search for free entry in pcb; terminated process (state 0)

while(countter<=31) do
	if([READY_LIST + countter*32 + 1] == 0) then
		break;
	endif;
	countter= countter+1;
endwhile;
breakpoint;
//if not found return 0

if(countter>31) then
	[physicalSP - 2] = -1;
	print("Er1");
	ireturn;
endif;

alias pcbIndex S1; // pcbIndex = countter




alias counter S3;
alias pages_process S2;


//find the free page in MEM_LIST

alias free_page S4;
alias freepage S11;
alias page S9;
alias diskB S10;
free_page = 0;

while(free_page < 64) do
	if([MEM_LIST + free_page] == 0) then
		break;
	endif;
	free_page = free_page + 1;
endwhile;

if(free_page >= 64) then
	print("WW");
	page = 1032;
	while(1==1) do
		
		//skip if the page is stack page, i.e. 4th page;
		//first page -> 0, 2nd -> 2, 3rd -> 4, 4th -> 6
		
		//fouth page of a process is in Word no. : 6,14,22,...
		//it is of form 8*n-2
		
		if((page-PTBR+2)%8 == 0) then
			
			page=page+2;
			//check for PTBR limit
			if(page > 1279) then
				page=1032;
			endif;
			
			continue;
		endif;
		
		

		if([page+1]=="01" || [page+1]=="11") then
			
			//skip if page is shared and valid
		
			if([MEM_LIST+[page]]>1) then
				page = page+2;
				
				//check for PTBR limit
				if(page > 1279) then
					page=1032;
				endif;
				
				continue;
			endif;
		
			if([page+1] == "11") then
				[page+1] = "01";
			else
				//VICTIM PAGE
				
				//swap out the process
				diskB = [1472 + (page-1024)/8]; //basic block
				load(1,diskB);
				
				
				if ((page-PTBR)%8 == 0) then
					diskB=[512];
				endif;
				
				if (((page-PTBR)%8 == 2)||((page-PTBR)%8 == -6)) then
					diskB=[512+1];
				endif;
				
				if (((page-PTBR)%8 == 4)||((page-PTBR)%8 == -4)) then
					diskB=[512+2];
				endif;
				
				
				freepage = [page];
				[page] = diskB;
				[page+1] = "00";
				free_page=freepage; 
				break;
			endif;
		endif;
		
		page = page + 2;
		//check for PTBR limit
		if(page > 1279) then
			page=1032;
		endif;	
				
	endwhile;

endif;



alias child_ptbr S6;
alias parent_ptbr S7;
alias x S8;

child_ptbr = pcbIndex*8 + PAGE_TABLE;
parent_ptbr = PTBR;

[1472 + (child_ptbr-1024)/8] = [1472 + S15];

//allocate stack for child process
[MEM_LIST + free_page] = 1;
[child_ptbr + 3*2] = free_page;
[child_ptbr + 3*2 +1] = "01";

counter = 0;
while(counter < 512) do
	[ [child_ptbr + 3*2]*512 + counter] = [[PTBR + 3*2]*512 + counter];
	counter = counter + 1;
endwhile;

counter = 0;
while(counter < 3) do
	[child_ptbr + counter] = [PTBR + counter];
	if([PTBR + counter+1] == "01" || [PTBR + counter+1]=="11") then
		[MEM_LIST + [PTBR+counter]] = [MEM_LIST + [PTBR+counter]]+1;
	endif;
	counter = counter + 1;
endwhile;


//PCB
// 0-pid 1-state 2-bp 3-sp 4-ip 5-ptbr 6-ptlr 7-14 - r0-r7 15-30 - perprocess open file table 31-free



//Set PID of the process as the PCB Index
[READY_LIST + pcbIndex*32] = pcbIndex;
//print("child");
//print(pcbIndex);

//set child_ptbr in pcb
[READY_LIST + pcbIndex*32 + 5] = child_ptbr;
[READY_LIST + pcbIndex*32 + 6] = 4;


//ip(logical) of parent is in stack, set child's ip

[READY_LIST + pcbIndex*32 + 4] = [physicalSP];

[READY_LIST + pcbIndex*32 + 3] = SP-1;

[READY_LIST + pcbIndex*32 + 2] = BP;

[READY_LIST + pcbIndex*32 + 7]  = R0;
[READY_LIST + pcbIndex*32 + 8]  = R1;
[READY_LIST + pcbIndex*32 + 9]  = R2;
[READY_LIST + pcbIndex*32 + 10] = R3;
[READY_LIST + pcbIndex*32 + 11] = R4;
[READY_LIST + pcbIndex*32 + 12] = R5;
[READY_LIST + pcbIndex*32 + 13] = R6;
[READY_LIST + pcbIndex*32 + 14] = R7;

//set Parent PID
[READY_LIST + pcbIndex*32 + 31] = S15;

// Per-Process Open File Table
counter = 15;
while(counter < 31) do
	[READY_LIST + pcbIndex*32 + counter] = [READY_LIST + (PTBR-1024)*4 + counter];

	[READY_LIST + pcbIndex*32 + counter+1] = [READY_LIST + (PTBR-1024)*4 + counter+1];
	if([READY_LIST + (PTBR-1024)*4] != -1) then
		[FILE_TABLE + [READY_LIST + (PTBR-1024)*4]*2 + 1] = [FILE_TABLE + [READY_LIST + (PTBR-1024)*4]*2 + 1]+1;
	endif;	
	counter=counter+2;
endwhile;

//Make State of child process Ready
[READY_LIST + pcbIndex*32 + 1] = 1;

physicalSP = ([PTBR + 2*(SP/512)]*512 + (SP)%512);

//Return Value in Parent Process
[physicalSP-2] = pcbIndex;
//print(pcbIndex);

alias childPhysicalSp S9;
childPhysicalSp = ([child_ptbr + 2*((SP-1)/512)]*512 + (SP-1)%512);

//Return Value in Child Process

//print "Details";
//print([child_ptbr + 2*((SP-1)/512)]);
//print([PTBR + 2*((SP-1)/512)]);
//print(free_page);
//print (".");

[childPhysicalSp - 1] = -2;

//print("PID Parent");
//print(S15);
//
//print("PID Child");
//print(pcbIndex);

ireturn; 
