alias physicalSP S0;
physicalSP = ([PTBR + 2*(SP/512)]*512 + (SP)%512);

alias  sysCallNo S1;
sysCallNo = [physicalSP-1];
breakpoint;
// Write System Call
if(sysCallNo == 5) then
	alias fd S2;	
	fd = [physicalSP - 4];

	if(fd>=8 || fd<0) then
		[physicalSP-2]=-1;
		ireturn;
	endif;
	
	alias PCB S3;
	PCB = READY_LIST + ((PTBR-1024)/8)*32; //32*pid + READY)LIST 
	
	
	alias sysIn S4;
	alias lseek S5;

	//index of system wide open file table in Per Process open file table
	sysIn = [PCB + 15 + fd*2];
	lseek = [PCB + 16 + fd*2];
	
	//If index of system wide open file table in Per Process open file table is -1 return
	if (sysIn==-1) then
		[physicalSP-2]=-1;
		ireturn;
	endif;
	
	alias fatIn S6;

	fatIn = [FILE_TABLE + sysIn*2];

	//Get Basic Block of the file and load in scratch pad
	 
	load(1,[FAT + fatIn*8 + 2]);
	
	alias data S7;
	data = [512 + lseek/512] ;
	
	//if entry in basic block is -1, find a new empty block 
	if(data == -1) then
		data=0;
		while(data<=447) do
			if([DISK_LIST + data] == 0 ) then
				[DISK_LIST + data] = 1;
				break;
			endif;
			data = data + 1;
		endwhile;
		
		if(data>447) then
			[physicalSP-2]=-1;
			ireturn;
		endif;
		
		[512 + lseek/512] = data;
		store(1,[FAT + fatIn*8 + 2]);
		
		[FAT + fatIn*8 + 1] = [FAT + fatIn*8 + 1] + 512;
		store(FAT/512,19);
		store(DISK_LIST/512,20);		
	endif;
	
	load(1,data);
	[512 + (lseek % 512)] = [physicalSP - 3];
	store(1,data);
	
	[PCB + 16 + fd*2] = [PCB + 16 + fd*2] + 1;
	[physicalSP - 2] = 0;
	
	ireturn;
endif;
	
	
				
